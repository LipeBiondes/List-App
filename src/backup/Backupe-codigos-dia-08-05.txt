<Main

import AsyncStorage from '@react-native-async-storage/async-storage'
import React, { useEffect, useState } from 'react'
import {
  TouchableOpacity,
  View,
  Text,
  StyleSheet,
  FlatList
} from 'react-native'
import Icon from 'react-native-vector-icons/MaterialIcons'
import Constants from 'expo-constants'
const Main = ({ navigation }) => {
  //essa const armazena as tarefas recuperadas
  const [tasks, setTasks] = useState([])

  // Recarregando a lista de tarefas toda vez que a tela Main voltar a ter foco e recuperando os dados do bd e setando os dados recuperados na Flatlist
  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      AsyncStorage.getItem('dataTasks').then(data => {
        const tasks = JSON.parse(data)
        setTasks(tasks)
      })
    })
    return unsubscribe
  }, [navigation])

  //Função para passar os parametros id e isEdit pelo navigate
  const onTaskEdit = taskId => {
    const task = tasks.find(item => item.id === taskId)
    navigation.navigate('Task', { taskGet: task, isEdit: true })
  }

  //Função para passar os parametros id e isEdit vazios pois na pagina Task se espera que esses parametros sejam sempre passados
  const onNewTask = () => {
    const task = { id: 0, task: '', description: '' }
    navigation.navigate('Task', { taskGet: task, isEdit: false })
  }
  //Função para apagar a tarefa do bd
  const onTaskDelete = async taskId => {
    const newTasks = tasks.filter(item => item.id !== taskId)
    await AsyncStorage.setItem('dataTasks', JSON.stringify(newTasks))
    setTasks(newTasks)
  }
  //Função para alterar o conclud da tarefa no bd
  const onTaskConclud = async taskId => {
    const newTasks = tasks.map(item => {
      if (item.id === taskId) {
        item.conclud = !item.conclud
      }
      return item
    })
    await AsyncStorage.setItem('dataTasks', JSON.stringify(newTasks))
    setTasks(newTasks)
  }
  return (
    <View style={styles.container}>
      <View style={styles.toolBox}>
        <Text style={styles.title}>Lista de Tarefas</Text>
        <TouchableOpacity style={styles.toolBoxButton} onPress={onNewTask}>
          <Icon name="add" size={35} color="#fff" />
        </TouchableOpacity>
      </View>
      <FlatList
        //Renderizando os itens recuperados do bd
        data={tasks}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <View style={styles.itemsContainer}>
            <TouchableOpacity
              style={styles.itemButton}
              onPress={() => onTaskConclud(item.id)}
            >
              <Text
                style={[
                  styles.itemText,
                  item.conclud ? styles.itemConlcud : ''
                ]}
              >
                {item.task}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.editButton}
              onPress={() => onTaskEdit(item.id)}
            >
              <Icon name="create" size={35} color="#2ecc71" />
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={() => onTaskDelete(item.id)}
            >
              <Icon name="delete" size={35} color="red" />
            </TouchableOpacity>
          </View>
        )}
      />
    </View>
  )
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 5,
    paddingTop: Constants.statusBarHeight - 20,
    backgroundColor: '#f0ee87'
  },
  toolBox: {
    flexDirection: 'row',
    marginBottom: 5,
    marginRight: 5
  },
  title: {
    flex: 1,
    color: '#3498db',
    fontSize: 40
  },
  toolBoxButton: {
    borderRadius: 50,
    backgroundColor: '#3498db',
    height: 42,
    width: 42,
    justifyContent: 'center',
    alignItems: 'center'
  },
  itemsContainer: {
    flexDirection: 'row',
    borderBottomWidth: 2,
    borderBottomColor: '#d7dd75'
  },
  itemButton: {
    flex: 1
  },
  editButton: {
    paddingRight: 2
  },
  itemText: {
    fontSize: 35
  },
  deleteButton: {
    paddingRight: 2
  },
  itemConlcud: {
    textDecorationLine: 'line-through',
    color: '#95a5a6'
  }
})
export default Main


>

<Task

import { useRoute } from '@react-navigation/native'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { useState, useEffect } from 'react'
import {
  Text,
  View,
  StyleSheet,
  TextInput,
  TouchableOpacity
} from 'react-native'
import Constants from 'expo-constants'
/** Estrutura do banco
 * id: int
 * task: string
 * description: string
 * conclud: boolean
 * {"conclud": false, "description": "descrição", "id": "1", "task": "tarefa 1"}
 */

const Task = ({ navigation, route }) => {
  const { taskGet, isEdit } = route.params

  //A constante tasks recebe todas as tarefas do banco
  const [tasks, setTasks] = useState([])

  // Constantes que armazenam os valores digitados pelo usuário
  const [task, setTask] = useState(taskGet.task)
  const [description, setDescription] = useState(taskGet.description)
  const [conclud, setConclud] = useState(taskGet.conclud)

  //Esse useEffect recupera as tarefas do banco e coloca o objeto task no array tasks para que possamos usar o metodo tasks.push no onSave
  useEffect(() => {
    AsyncStorage.getItem('dataTasks').then(data => {
      const tasks = JSON.parse(data)
      if (data == null) {
        setTasks([
          {
            conclud: false,
            description: '',
            id: '1',
            task: ''
          }
        ])
      } else {
        setTasks(tasks)
      }
    })
  }, [])

  //Função para validar os campos
  const isValid = () => {
    if (task !== undefined && task !== '' && task !== null) {
      return true
    }
    return false
  }

  //Função para salvar os dados no banco
  const onSave = async () => {
    if (isValid()) {
      if (isEdit) {
        //Editando uma tarefa existente
        //Variável temporaria para receber todas as listas de atividades
        let newTasks = tasks
        newTasks.map(item => {
          //usamos a função map onde o id seja o mesmo passado pele navigate para alterar o titulo da task e a descrição
          if (item.id === taskGet.id) {
            item.task = task
            item.description = description
            item.conclud = conclud
          }
          return item
        })
        //Mandando para o bd a lista de tarefas atualizadas
        await AsyncStorage.setItem('dataTasks', JSON.stringify(newTasks))
      } else {
        //Adicionando uma nova tarefa
        const conclud = false

        // Função para gerar ids aleatórios
        let d = new Date()
        const id = d.getTime().toString()

        // Criando a "classe" de task: data, para receber os valores da task
        const data = {
          id,
          task,
          description,
          conclud
        }
        // Removendo a tarefa com o campo task igual a ''
        const updatedTasks = tasks.filter(task => task.task !== '')

        // Adicionando a nova task ao final da lista
        updatedTasks.push(data)

        // gravando a tarefa nova no banco
        await AsyncStorage.setItem('dataTasks', JSON.stringify(updatedTasks))
      }
      navigation.navigate('Main')
    } else {
      alert('Por favor preencha os campos...')
    }
  }

  return (
    <View style={styles.container}>
      <Text style={styles.pageTitle}>
        {isEdit ? 'Altere sua Tarefa' : 'Escreva uma nova tarefa...'}
      </Text>

      <TextInput
        placeholder="Nome da tarefa."
        style={styles.input}
        value={task}
        onChangeText={text => {
          setTask(text)
        }}
      />

      <TextInput
        placeholder="Detalhe sua tarefa aqui."
        style={styles.input}
        multiline={true}
        numberOfLines={5}
        value={description}
        onChangeText={text => {
          setDescription(text)
        }}
      />

      <TouchableOpacity
        //Botão de Cadastrar
        style={[styles.saveButton, isValid() ? '' : styles.saveButtonInvalid]}
        //chamando a função de gravar no banco onSave
        onPress={onSave}
      >
        <Text style={styles.saveButtonText}>
          {isEdit ? 'Atualizar' : 'Cadastrar'}
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        //Botão de Cancelar
        onPress={() => navigation.navigate('Main')}
      >
        <Text style={styles.cancelButtonText}>Cancelar</Text>
      </TouchableOpacity>
    </View>
  )
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: Constants.statusBarHeight - 20,
    margin: 5
  },
  containerButtons: {
    alignItems: 'center'
  },
  pageTitle: {
    textAlign: 'center',
    fontSize: 32,
    marginBottom: 25,
    marginTop: 5
  },
  input: {
    fontSize: 26,
    borderBottomColor: '#f39c12',
    borderBottomWidth: 1,
    marginBottom: 5
  },
  saveButton: {
    backgroundColor: '#f39c12',
    paddingVertical: 10,
    paddingHorizontal: 30,
    borderRadius: 8,
    marginBottom: 20,
    marginTop: 22
  },
  saveButtonInvalid: {
    opacity: 0.6
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 26,
    fontWeight: '500',
    alignSelf: 'center'
  },
  cancelButton: {},
  cancelButtonText: {
    fontSize: 26,
    color: '#95a5a6',
    alignSelf: 'center'
  }
})
export default Task


>

<WelcomeScreen

import * as React from 'react'
import { Text, View, TouchableOpacity } from 'react-native'

const WelcomeScreen = ({ navigation }) => {
  return (
    <View>
      <TouchableOpacity onPress={() => navigation.navigate('Main')}>
        <Text> Vamos Começar!</Text>
      </TouchableOpacity>
    </View>
  )
}

export default WelcomeScreen


>

<Routes

import * as React from 'react'
import { NavigationContainer } from '@react-navigation/native'
import { createNativeStackNavigator } from '@react-navigation/native-stack'

import Main from './pages/Main'
import Task from './pages/Task'
import WelcomeScreen from './pages/WelcomeScreen'

const Stack = createNativeStackNavigator()

/*<Stack.Screen
          name="WelcomeScreen"
          component={WelcomeScreen}
          options={{}}
        /> */

const Routes = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Main"
          component={Main}
          options={{
            headerShown: true,
            headerStyle: {
              backgroundColor: '#ffffff'
            },
            headerTitle: 'Tela Inicial'
          }}
        />
        <Stack.Screen
          name="Task"
          component={Task}
          options={{
            headerShown: true,
            headerTitle: 'Área de tarefas',
            headerStyle: {
              backgroundColor: '#ffffff'
            }
          }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  )
}

export default Routes


>

<Depedencies

"dependencies": {
    "@react-native-async-storage/async-storage": "~1.17.3",
    "@react-navigation/native": "^6.1.6",
    "@react-navigation/native-stack": "^6.9.12",
    "expo": "^46.0.21",
    "expo-status-bar": "~1.4.4",
    "react": "18.0.0",
    "react-native": "0.69.9",
    "react-native-safe-area-context": "4.3.1",
    "react-native-screens": "~3.15.0",
    "react-native-vector-icons": "^6.6.0"
  },

>